Terminals unused in grammar

   EF
   LBL


Grammar

    0 $accept: program $end

    1 program: instructions

    2 instructions: instructions instruction_
    3             | /* empty */

    4 instruction_: instruction END
    5             | END

    6 instruction: AND alu_opr
    7            | ADD alu_opr
    8            | SUB alu_opr
    9            | OR alu_opr
   10            | NOT alu_opr
   11            | LSL alu_opr
   12            | LSR alu_opr
   13            | BNE br_opr
   14            | BLT br_opr
   15            | JMP '#' num_8
   16            | CALL
   17            | RTS
   18            | ISR
   19            | MOV mov_opr
   20            | LDR
   21            | STR
   22            | LMR
   23            | IN
   24            | OUT
   25            | num_16

   26 alu_opr: num_4 ',' num_4
   27        | num_4 ',' '#' num_8
   28        | num_4 ',' '(' num_4 ')'
   29        | num_4 ',' num_4 '(' num_8 ')'

   30 br_opr: num_4 ',' num_6
   31       | '(' num_4 ')' ',' num_6

   32 mov_opr: num_4 ',' num_4
   33        | num_4 ',' '(' num_4 ')'

   34 num_4: DEC
   35      | HEX

   36 num_6: DEC
   37      | HEX

   38 num_8: DEC
   39      | HEX

   40 num_16: BIN


Terminals, with rules where they appear

$end (0) 0
'#' (35) 15 27
'(' (40) 28 29 31 33
')' (41) 28 29 31 33
',' (44) 26 27 28 29 30 31 32 33
error (256)
BIN (258) 40
DEC (259) 34 36 38
END (260) 4 5
EF (261)
HEX (262) 35 37 39
LBL (263)
AND (264) 6
ADD (265) 7
SUB (266) 8
OR (267) 9
NOT (268) 10
LSL (269) 11
LSR (270) 12
BNE (271) 13
BLT (272) 14
JMP (273) 15
CALL (274) 16
RTS (275) 17
ISR (276) 18
MOV (277) 19
LDR (278) 20
STR (279) 21
LMR (280) 22
IN (281) 23
OUT (282) 24


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
instructions (34)
    on left: 2 3, on right: 1 2
instruction_ (35)
    on left: 4 5, on right: 2
instruction (36)
    on left: 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25,
    on right: 4
alu_opr (37)
    on left: 26 27 28 29, on right: 6 7 8 9 10 11 12
br_opr (38)
    on left: 30 31, on right: 13 14
mov_opr (39)
    on left: 32 33, on right: 19
num_4 (40)
    on left: 34 35, on right: 26 27 28 29 30 31 32 33
num_6 (41)
    on left: 36 37, on right: 30 31
num_8 (42)
    on left: 38 39, on right: 15 27 29
num_16 (43)
    on left: 40, on right: 25


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (instructions)

    program       go to state 1
    instructions  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: instructions .
    2 instructions: instructions . instruction_

    BIN   shift, and go to state 4
    END   shift, and go to state 5
    AND   shift, and go to state 6
    ADD   shift, and go to state 7
    SUB   shift, and go to state 8
    OR    shift, and go to state 9
    NOT   shift, and go to state 10
    LSL   shift, and go to state 11
    LSR   shift, and go to state 12
    BNE   shift, and go to state 13
    BLT   shift, and go to state 14
    JMP   shift, and go to state 15
    CALL  shift, and go to state 16
    RTS   shift, and go to state 17
    ISR   shift, and go to state 18
    MOV   shift, and go to state 19
    LDR   shift, and go to state 20
    STR   shift, and go to state 21
    LMR   shift, and go to state 22
    IN    shift, and go to state 23
    OUT   shift, and go to state 24

    $default  reduce using rule 1 (program)

    instruction_  go to state 25
    instruction   go to state 26
    num_16        go to state 27


state 3

    0 $accept: program $end .

    $default  accept


state 4

   40 num_16: BIN .

    $default  reduce using rule 40 (num_16)


state 5

    5 instruction_: END .

    $default  reduce using rule 5 (instruction_)


state 6

    6 instruction: AND . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 30
    num_4    go to state 31


state 7

    7 instruction: ADD . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 32
    num_4    go to state 31


state 8

    8 instruction: SUB . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 33
    num_4    go to state 31


state 9

    9 instruction: OR . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 34
    num_4    go to state 31


state 10

   10 instruction: NOT . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 35
    num_4    go to state 31


state 11

   11 instruction: LSL . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 36
    num_4    go to state 31


state 12

   12 instruction: LSR . alu_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    alu_opr  go to state 37
    num_4    go to state 31


state 13

   13 instruction: BNE . br_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29
    '('  shift, and go to state 38

    br_opr  go to state 39
    num_4   go to state 40


state 14

   14 instruction: BLT . br_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29
    '('  shift, and go to state 38

    br_opr  go to state 41
    num_4   go to state 40


state 15

   15 instruction: JMP . '#' num_8

    '#'  shift, and go to state 42


state 16

   16 instruction: CALL .

    $default  reduce using rule 16 (instruction)


state 17

   17 instruction: RTS .

    $default  reduce using rule 17 (instruction)


state 18

   18 instruction: ISR .

    $default  reduce using rule 18 (instruction)


state 19

   19 instruction: MOV . mov_opr

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    mov_opr  go to state 43
    num_4    go to state 44


state 20

   20 instruction: LDR .

    $default  reduce using rule 20 (instruction)


state 21

   21 instruction: STR .

    $default  reduce using rule 21 (instruction)


state 22

   22 instruction: LMR .

    $default  reduce using rule 22 (instruction)


state 23

   23 instruction: IN .

    $default  reduce using rule 23 (instruction)


state 24

   24 instruction: OUT .

    $default  reduce using rule 24 (instruction)


state 25

    2 instructions: instructions instruction_ .

    $default  reduce using rule 2 (instructions)


state 26

    4 instruction_: instruction . END

    END  shift, and go to state 45


state 27

   25 instruction: num_16 .

    $default  reduce using rule 25 (instruction)


state 28

   34 num_4: DEC .

    $default  reduce using rule 34 (num_4)


state 29

   35 num_4: HEX .

    $default  reduce using rule 35 (num_4)


state 30

    6 instruction: AND alu_opr .

    $default  reduce using rule 6 (instruction)


state 31

   26 alu_opr: num_4 . ',' num_4
   27        | num_4 . ',' '#' num_8
   28        | num_4 . ',' '(' num_4 ')'
   29        | num_4 . ',' num_4 '(' num_8 ')'

    ','  shift, and go to state 46


state 32

    7 instruction: ADD alu_opr .

    $default  reduce using rule 7 (instruction)


state 33

    8 instruction: SUB alu_opr .

    $default  reduce using rule 8 (instruction)


state 34

    9 instruction: OR alu_opr .

    $default  reduce using rule 9 (instruction)


state 35

   10 instruction: NOT alu_opr .

    $default  reduce using rule 10 (instruction)


state 36

   11 instruction: LSL alu_opr .

    $default  reduce using rule 11 (instruction)


state 37

   12 instruction: LSR alu_opr .

    $default  reduce using rule 12 (instruction)


state 38

   31 br_opr: '(' . num_4 ')' ',' num_6

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    num_4  go to state 47


state 39

   13 instruction: BNE br_opr .

    $default  reduce using rule 13 (instruction)


state 40

   30 br_opr: num_4 . ',' num_6

    ','  shift, and go to state 48


state 41

   14 instruction: BLT br_opr .

    $default  reduce using rule 14 (instruction)


state 42

   15 instruction: JMP '#' . num_8

    DEC  shift, and go to state 49
    HEX  shift, and go to state 50

    num_8  go to state 51


state 43

   19 instruction: MOV mov_opr .

    $default  reduce using rule 19 (instruction)


state 44

   32 mov_opr: num_4 . ',' num_4
   33        | num_4 . ',' '(' num_4 ')'

    ','  shift, and go to state 52


state 45

    4 instruction_: instruction END .

    $default  reduce using rule 4 (instruction_)


state 46

   26 alu_opr: num_4 ',' . num_4
   27        | num_4 ',' . '#' num_8
   28        | num_4 ',' . '(' num_4 ')'
   29        | num_4 ',' . num_4 '(' num_8 ')'

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29
    '#'  shift, and go to state 53
    '('  shift, and go to state 54

    num_4  go to state 55


state 47

   31 br_opr: '(' num_4 . ')' ',' num_6

    ')'  shift, and go to state 56


state 48

   30 br_opr: num_4 ',' . num_6

    DEC  shift, and go to state 57
    HEX  shift, and go to state 58

    num_6  go to state 59


state 49

   38 num_8: DEC .

    $default  reduce using rule 38 (num_8)


state 50

   39 num_8: HEX .

    $default  reduce using rule 39 (num_8)


state 51

   15 instruction: JMP '#' num_8 .

    $default  reduce using rule 15 (instruction)


state 52

   32 mov_opr: num_4 ',' . num_4
   33        | num_4 ',' . '(' num_4 ')'

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29
    '('  shift, and go to state 60

    num_4  go to state 61


state 53

   27 alu_opr: num_4 ',' '#' . num_8

    DEC  shift, and go to state 49
    HEX  shift, and go to state 50

    num_8  go to state 62


state 54

   28 alu_opr: num_4 ',' '(' . num_4 ')'

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    num_4  go to state 63


state 55

   26 alu_opr: num_4 ',' num_4 .
   29        | num_4 ',' num_4 . '(' num_8 ')'

    '('  shift, and go to state 64

    $default  reduce using rule 26 (alu_opr)


state 56

   31 br_opr: '(' num_4 ')' . ',' num_6

    ','  shift, and go to state 65


state 57

   36 num_6: DEC .

    $default  reduce using rule 36 (num_6)


state 58

   37 num_6: HEX .

    $default  reduce using rule 37 (num_6)


state 59

   30 br_opr: num_4 ',' num_6 .

    $default  reduce using rule 30 (br_opr)


state 60

   33 mov_opr: num_4 ',' '(' . num_4 ')'

    DEC  shift, and go to state 28
    HEX  shift, and go to state 29

    num_4  go to state 66


state 61

   32 mov_opr: num_4 ',' num_4 .

    $default  reduce using rule 32 (mov_opr)


state 62

   27 alu_opr: num_4 ',' '#' num_8 .

    $default  reduce using rule 27 (alu_opr)


state 63

   28 alu_opr: num_4 ',' '(' num_4 . ')'

    ')'  shift, and go to state 67


state 64

   29 alu_opr: num_4 ',' num_4 '(' . num_8 ')'

    DEC  shift, and go to state 49
    HEX  shift, and go to state 50

    num_8  go to state 68


state 65

   31 br_opr: '(' num_4 ')' ',' . num_6

    DEC  shift, and go to state 57
    HEX  shift, and go to state 58

    num_6  go to state 69


state 66

   33 mov_opr: num_4 ',' '(' num_4 . ')'

    ')'  shift, and go to state 70


state 67

   28 alu_opr: num_4 ',' '(' num_4 ')' .

    $default  reduce using rule 28 (alu_opr)


state 68

   29 alu_opr: num_4 ',' num_4 '(' num_8 . ')'

    ')'  shift, and go to state 71


state 69

   31 br_opr: '(' num_4 ')' ',' num_6 .

    $default  reduce using rule 31 (br_opr)


state 70

   33 mov_opr: num_4 ',' '(' num_4 ')' .

    $default  reduce using rule 33 (mov_opr)


state 71

   29 alu_opr: num_4 ',' num_4 '(' num_8 ')' .

    $default  reduce using rule 29 (alu_opr)
